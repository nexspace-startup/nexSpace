// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  local
  google
  microsoft
}

model User {
  id          BigInt  @id @default(autoincrement())
  first_name  String  @db.VarChar(100)
  last_name   String  @db.VarChar(100)
  displayName String? @db.VarChar(120)

  // canonical email (case-insensitive at DB level with CITEXT)
  email           String    @unique @db.Citext
  emailVerifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  identities        AuthIdentity[]
  credential        UserLogin?
  workspacesCreated Workspace[]       @relation("UserCreatedWorkspaces")
  memberships       WorkspaceMember[]
  invitesSent       Invitation[]      @relation("UserInvites")
  chatMessages      ChatMessage[]
}

model AuthIdentity {
  id          BigInt       @id @default(autoincrement())
  userId      BigInt
  provider    AuthProvider
  providerId  String // email for local login and sub for google or microsoft
  createdAt   DateTime     @default(now())
  lastLoginAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerId])
  @@index([userId, provider])
}

model UserLogin {
  userId    BigInt   @id
  hash      String   @db.VarChar(255)
  alg       String   @default("argon2id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

model Workspace {
  id        BigInt   @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  name      String   @db.VarChar(120)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById BigInt
  createdBy   User   @relation("UserCreatedWorkspaces", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Cascade)

  members     WorkspaceMember[]
  invitations Invitation[]
  chatMessages ChatMessage[]

  @@index([createdById])
}

model WorkspaceMember {
  workspaceId BigInt
  userId      BigInt

  role     WorkspaceRole @default(MEMBER)
  joinedAt DateTime      @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([workspaceId, userId])
  @@index([userId])
  @@index([workspaceId, role])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}

model Invitation {
  id           String           @id @default(uuid()) @db.Uuid
  workspaceId  BigInt
  invitedBy    BigInt
  invitedEmail String           @db.Citext
  role         WorkspaceRole    @default(MEMBER)
  expiresAt    DateTime
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviter   User      @relation("UserInvites", fields: [invitedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([workspaceId])
  @@index([invitedEmail])
}

// Email templates

model EmailTemplate {
  id          String   @id @default(uuid())
  name        String   @unique      // e.g. "invite_workspace", "reset_password"
  subject     String                
  mailBody String               
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Chat messages (per workspace/room)
model ChatMessage {
  id          BigInt   @id @default(autoincrement())
  workspaceId BigInt
  senderId    BigInt
  roomUid     String   // LiveKit room id (we use Workspace.uid)
  content     String
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender    User      @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([workspaceId, createdAt])
  @@index([senderId, createdAt])
}
